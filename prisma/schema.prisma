datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nickname  String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isActive                  Boolean  @default(false)
  emailVerificationToken    String?  @unique
  emailVerificationExpires  DateTime?

  passwordResetToken    String?   @unique
  passwordResetExpires  DateTime?

  provider    String  @default("local") // 'local', 'google', 'kakao' 등
  providerId  String? @unique // 소셜 서비스에서 제공하는 고유 ID

  mainLedgerId String?

  mainLedger        Ledger?          @relation("UserMainLedger", fields: [mainLedgerId], references: [id])
  ledgerMemberships LedgerMember[]
  invitationsSent   LedgerInvitation[] @relation("InvitationSender")
  ownedLedgers      Ledger[]          @relation("LedgerOwner")
  transactions      Transaction[]
  activityLogs      LedgerActivityLog[]
  notificationSetting UserNotificationSetting?
  recurringRules    RecurringRule[]
  scheduledDigests  ScheduledDigest[]
}

model Ledger {
  id            String   @id @default(cuid())
  name          String
  description   String?
  currency      String   @default("KRW")
  monthStartDay Int      @default(1)
  ownerId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner        User          @relation("LedgerOwner", fields: [ownerId], references: [id])
  members      LedgerMember[]
  invitations  LedgerInvitation[]
  assetGroups  AssetGroup[]
  assets       Asset[]
  categories   Category[]
  mainUsers    User[]        @relation("UserMainLedger")
  transactions Transaction[]
  tags         Tag[]
  goals        Goal[]
  budgets      Budget[]
  recurringRules RecurringRule[]
  activityLogs LedgerActivityLog[]
}

model LedgerMember {
  id        String           @id @default(cuid())
  ledgerId  String
  userId    String
  role      LedgerMemberRole @default(EDITOR)
  createdAt DateTime         @default(now())

  ledger Ledger @relation(fields: [ledgerId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([ledgerId, userId])
}

model LedgerInvitation {
  id         String            @id @default(cuid())
  ledgerId   String
  email      String
  role       LedgerMemberRole  @default(VIEWER)
  token      String            @unique
  status     InvitationStatus  @default(PENDING)
  expiresAt  DateTime
  invitedById String
  createdAt  DateTime          @default(now())
  respondedAt DateTime?

  ledger    Ledger @relation(fields: [ledgerId], references: [id])
  invitedBy User   @relation("InvitationSender", fields: [invitedById], references: [id])
}

model AssetGroup {
  id        String         @id @default(cuid())
  ledgerId  String
  name      String
  type      AssetGroupType
  sortOrder Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  ledger Ledger  @relation(fields: [ledgerId], references: [id])
  assets Asset[]

  @@unique([ledgerId, name])
}

model Asset {
  id            String     @id @default(cuid())
  ledgerId      String
  groupId       String
  name          String
  type          AssetType
  initialAmount Int        @default(0)
  includeInNetWorth Boolean @default(true)
  billingDay     Int?
  upcomingPaymentAmount Int?
  sortOrder      Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  ledger Ledger     @relation(fields: [ledgerId], references: [id])
  group  AssetGroup @relation(fields: [groupId], references: [id])
  transactions        Transaction[]     @relation("PrimaryAsset")
  relatedTransactions Transaction[]     @relation("RelatedAsset")

  @@unique([ledgerId, name])
}

model Category {
  id         String       @id @default(cuid())
  ledgerId   String
  name       String
  type       CategoryType
  parentId   String?
  sortOrder  Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  ledger     Ledger     @relation(fields: [ledgerId], references: [id])
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  transactions Transaction[]
  splits        TransactionSplit[]

  @@unique([ledgerId, name, parentId])
}

model Transaction {
  id             String            @id @default(cuid())
  ledgerId       String
  assetId        String
  relatedAssetId String?
  categoryId     String?
  recurringRuleId String?
  createdById    String
  type           TransactionType
  status         TransactionStatus @default(ACTIVE)
  transactionDate DateTime
  bookedAt       DateTime          @default(now())
  amount         Int
  memo           String?
  note           String?
  photoUrl       String?
  receiptId      String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  ledger        Ledger      @relation(fields: [ledgerId], references: [id])
  asset         Asset       @relation("PrimaryAsset", fields: [assetId], references: [id])
  relatedAsset  Asset?      @relation("RelatedAsset", fields: [relatedAssetId], references: [id])
  category      Category?   @relation(fields: [categoryId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])
  recurringRule RecurringRule? @relation(fields: [recurringRuleId], references: [id])
  splits        TransactionSplit[]
  tags          TransactionTag[]
  attachments   TransactionAttachment[]
  goalContributions GoalContribution[]
  recurringInstances RecurringInstance[]
}

model TransactionSplit {
  id            String   @id @default(cuid())
  transactionId String
  categoryId    String
  amount        Int
  memo          String?
  createdAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Tag {
  id        String    @id @default(cuid())
  ledgerId  String
  name      String
  type      TagType   @default(CUSTOM)
  usageCount Int      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  ledger Ledger          @relation(fields: [ledgerId], references: [id])
  transactions TransactionTag[]

  @@unique([ledgerId, name])
}

model TransactionTag {
  id            String @id @default(cuid())
  transactionId String
  tagId         String

  transaction Transaction @relation(fields: [transactionId], references: [id])
  tag         Tag         @relation(fields: [tagId], references: [id])

  @@unique([transactionId, tagId])
}

model TransactionAttachment {
  id            String   @id @default(cuid())
  transactionId String
  fileUrl       String
  thumbnailUrl  String?
  mimeType      String
  size          Int
  createdAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model Goal {
  id             String     @id @default(cuid())
  ledgerId       String
  assetId        String
  name           String
  targetAmount   Int
  currentAmount  Int        @default(0)
  targetDate     DateTime?
  status         GoalStatus @default(ACTIVE)
  achievedAt     DateTime?
  coverImageUrl  String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  ledger       Ledger            @relation(fields: [ledgerId], references: [id])
  asset        Asset             @relation(fields: [assetId], references: [id])
  contributions GoalContribution[]
}

model GoalContribution {
  id           String      @id @default(cuid())
  goalId       String
  transactionId String
  amount       Int
  createdAt    DateTime    @default(now())

  goal        Goal        @relation(fields: [goalId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model Budget {
  id        String      @id @default(cuid())
  ledgerId  String
  year      Int
  month     Int
  basis     BudgetBasis
  currency  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  ledger Ledger       @relation(fields: [ledgerId], references: [id])
  items  BudgetItem[]

  @@unique([ledgerId, year, month, basis])
}

model BudgetItem {
  id         String   @id @default(cuid())
  budgetId   String
  parentItemId String?
  categoryId String?
  assetId    String?
  amount     Int
  path       String?
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  budget   Budget   @relation(fields: [budgetId], references: [id])
  parent   BudgetItem? @relation("BudgetItemHierarchy", fields: [parentItemId], references: [id])
  children BudgetItem[] @relation("BudgetItemHierarchy")
  category Category? @relation(fields: [categoryId], references: [id])
  asset    Asset?    @relation(fields: [assetId], references: [id])
}

model RecurringRule {
  id            String            @id @default(cuid())
  ledgerId      String
  assetId       String
  categoryId    String?
  createdById   String
  title         String?
  amount        Int
  type          TransactionType
  interval      RecurringInterval
  dayOfMonth    Int?
  dayOfWeek     Int?
  monthOfYear   Int?
  startDate     DateTime
  endDate       DateTime?
  leadTimeDays  Int?             @default(0)
  note          String?
  isActive      Boolean          @default(true)
  nextRunAt     DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  ledger     Ledger     @relation(fields: [ledgerId], references: [id])
  asset      Asset      @relation(fields: [assetId], references: [id])
  category   Category?  @relation(fields: [categoryId], references: [id])
  createdBy  User       @relation(fields: [createdById], references: [id])
  transactions Transaction[]
  instances  RecurringInstance[]
}

model RecurringInstance {
  id           String             @id @default(cuid())
  ruleId       String
  transactionId String?
  scheduledDate DateTime
  status       RecurringStatus    @default(SCHEDULED)
  createdAt    DateTime           @default(now())

  rule        RecurringRule @relation(fields: [ruleId], references: [id])
  transaction Transaction?  @relation(fields: [transactionId], references: [id])
}

model LedgerActivityLog {
  id        String   @id @default(cuid())
  ledgerId  String
  actorId   String
  type      String
  payload   Json?
  createdAt DateTime @default(now())

  ledger Ledger @relation(fields: [ledgerId], references: [id])
  actor  User   @relation(fields: [actorId], references: [id])
}

model UserNotificationSetting {
  id                 String  @id @default(cuid())
  userId             String  @unique
  weeklyDigest       Boolean @default(false)
  monthlyDigest      Boolean @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model ScheduledDigest {
  id          String   @id @default(cuid())
  userId      String
  type        DigestType
  scheduledFor DateTime
  payload     Json?
  createdAt   DateTime @default(now())
  sentAt      DateTime?

  user User @relation(fields: [userId], references: [id])
}

enum LedgerMemberRole {
  OWNER
  EDITOR
  VIEWER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum AssetGroupType {
  ASSET
  LIABILITY
}

enum AssetType {
  CASH
  BANK
  CHECK_CARD
  CREDIT_CARD
  LOAN
  INVESTMENT
  OTHER
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionStatus {
  ACTIVE
  ARCHIVED
  SOFT_DELETED
}

enum TagType {
  CUSTOM
  SYSTEM
}

enum GoalStatus {
  ACTIVE
  ACHIEVED
  ARCHIVED
}

enum BudgetBasis {
  CATEGORY
  ASSET
  CATEGORY_ASSET
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum RecurringStatus {
  SCHEDULED
  POSTED
  SKIPPED
}

enum DigestType {
  WEEKLY
  MONTHLY
}
